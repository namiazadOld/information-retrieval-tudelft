/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * mainFrame.java
 *
 * Created on Apr 21, 2010, 10:29:33 AM
 */
package gui;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
import org.antlr.runtime.RecognitionException;
import ranking.CosineRanker;
import soundex.Soundex;

/**
 *
 * @author Administrator
 */
public class mainFrame extends javax.swing.JFrame {

    /** Creates new form mainFrame */
    public mainFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jRB_Bag_Of_Word = new javax.swing.JRadioButton();
        jRB_Bolean = new javax.swing.JRadioButton();
        jTF_search = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        JBSearch = new javax.swing.JToggleButton();
        jL1 = new javax.swing.JLabel();
        jL3_status = new javax.swing.JLabel();
        jL_Did_You_Mean = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jL_Results = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jRB_Bag_Of_Word.setText("Bag Of Word Mode");

        jRB_Bolean.setText("Boolean Mode");

        jTF_search.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jTF_searchCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        jLabel1.setText("Search");

        JBSearch.setText("Search");
        JBSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JBSearchMouseClicked(evt);
            }
        });

        jL1.setText("Do You Mean :");

        jL_Did_You_Mean.setText("  ");
        jL_Did_You_Mean.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_Did_You_MeanMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRB_Bolean)
                    .addComponent(jRB_Bag_Of_Word))
                .addGap(75, 75, 75)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(135, 135, 135))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jL1)
                            .addGap(57, 57, 57))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jTF_search, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(JBSearch))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jL_Did_You_Mean)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jL3_status, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jL3_status, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRB_Bolean)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRB_Bag_Of_Word))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTF_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(JBSearch))
                                    .addGap(18, 18, 18)
                                    .addComponent(jL1))
                                .addComponent(jL_Did_You_Mean)))
                        .addGap(11, 11, 11))))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Hi");
        jScrollPane2.setViewportView(jTextArea1);

        jL_Results.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_ResultsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jL_Results);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JBSearchMouseClicked
        // TODO add your handling code here:
        Set_Result(jTF_search.getText());
    }//GEN-LAST:event_JBSearchMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        setFrom();

    }//GEN-LAST:event_formWindowOpened

    private void jL_Did_You_MeanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_Did_You_MeanMouseClicked
        // TODO add your handling code here:
        jTF_search.setText(jL_Did_You_Mean.getText());
        Set_Result(jL_Did_You_Mean.getText());
    }//GEN-LAST:event_jL_Did_You_MeanMouseClicked

    private void jL_ResultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_ResultsMouseClicked
        // TODO add your handling code here:
        jTextArea1.setText("");
        File reutersDir = new File("reutersTXT/");
        File[] docs = reutersDir.listFiles();

        for (File f : docs) {
            if (f.isFile() && f.getName().endsWith(".txt")) {
                String name = f.getName().substring(0, f.getName().indexOf('.'));
                Integer docid = Integer.parseInt(name);
                Object selected_item = jL_Results.getSelectedValue();
                if (docid.equals(selected_item)) {
                    try {
                        // Open the file that is the first
                        // command line parameter
                        FileInputStream fstream = new FileInputStream("E:\\Computer Science\\Projects\\workspace\\InformationRetrieval\\reutersTXT\\" + docid + ".TXT");
                        // Get the object of DataInputStream
                        DataInputStream in = new DataInputStream(fstream);
                        BufferedReader br = new BufferedReader(new InputStreamReader(in));
                        String strLine;
                        int linecount = 0;
                        int result_length = jTF_search.getText().length();
                        //Read File Line By Line
                        while ((strLine = br.readLine()) != null) {
                           strLine = strLine.replaceAll(jTF_search.getText(), jTF_search.getText().toUpperCase());
                           jTextArea1.append(strLine + "\n");
                        }
                        in.close();
                        // search_TXT_File(br,jTF_search.getText());
                    } catch (Exception e) {//Catch exception if any
                        System.err.println("Error: " + e.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jL_ResultsMouseClicked

    private void jTF_searchCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTF_searchCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jTF_searchCaretPositionChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new mainFrame().setVisible(true);
                try {
                    query.Query.main(null);
                } catch (Exception ex) {
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton JBSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jL1;
    private javax.swing.JLabel jL3_status;
    private javax.swing.JLabel jL_Did_You_Mean;
    private javax.swing.JList jL_Results;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRB_Bag_Of_Word;
    private javax.swing.JRadioButton jRB_Bolean;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTF_search;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    public static DefaultListModel model;
    public TreePath path;
    public static MutableTreeNode mNode;
    public static DefaultMutableTreeNode nNode;
    private String input;
    public static int K_TOP = 10;
    public static int MODE_BOOLEAN = 0;
    public static int MODE_BAG_OF_WORDS = 1;
    public static int MODE_HighIDF_ON = 2;
    public static int MODE_HighIDF_OFF = 3;

    //public static Object[] hierarchy;
    private void Set_Result(String in) {
        jTextArea1.setText("");
        model = null;
        String soundex = Soundex.guessSoundex(in);
        jL_Did_You_Mean.setText(soundex);

        if (jRB_Bolean.isSelected()) {

            set_jl_Results(in, MODE_BOOLEAN);

        }
        if (jRB_Bag_Of_Word.isSelected()) {
            if (in.contains("*")) {

                String s = query.Query.join(query.Query.takeOutQueryTerms(in), "or");
                jL3_status.setText("Entered query is replaced by this boolean query: " + s);
                set_jl_Results(s, MODE_BAG_OF_WORDS);
            }
        } else {
            jL3_status.setText("High-idf turned off:");
            set_jl_Results(in, MODE_HighIDF_ON);
            jL3_status.setText("High-idf turned on:");
            set_jl_Results(in, MODE_HighIDF_OFF);
        }
    }

    private void set_jl_Results(String in, int mode) {

        query.Query q;
        try {

            if (mode == 0 || mode == 1) {
                model = new DefaultListModel();
                jL_Results.setModel(model);
                q = new query.Query(in);
                List<Integer> r = q.getResult();
                int[] items = new int[r.size()];
                for (int i = 0; i < items.length; i++) {
                    items[i] = r.get(i);
                }

                // Initialize the list with items
                for (int i = 0; i < items.length; i++) {
                    model.add(i, items[i]);
                }
            }
            List<String> queryParsed = query.Query.takeOutQueryTerms(in);
            if (mode == 2) {
               List<Integer> r = CosineRanker.rankingResults(queryParsed, K_TOP, false);
                int[] items = new int[r.size()];
                for (int i = 0; i < items.length; i++) {
                    items[i] = r.get(i);
                }

                // Initialize the list with items
                for (int i = 0; i < items.length; i++) {
                    model.add(i, items[i]);
                }

            } else if (mode == 3) {
                 List<Integer> r = CosineRanker.rankingResults(queryParsed, K_TOP, true);
                 int[] items = new int[r.size()];
                for (int i = 0; i < items.length; i++) {
                    items[i] = r.get(i);
                }

                // Initialize the list with items
                for (int i = 0; i < items.length; i++) {
                    model.add(i, items[i]);
                }
            }

            jL_Results.setModel(model);

        } catch (RecognitionException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setFrom() {

        DefaultMutableTreeNode firstNode = new DefaultMutableTreeNode("Results");
        // jT_result = new JTree(firstNode);

//        nNode = new DefaultMutableTreeNode(firstNode);
//        path = tree.getNextMatch("M", 0, Position.Bias.Forward);
//        node = (MutableTreeNode)path.getLastPathComponent();
//         model.insertNodeInto(nNode, node, node.getChildCount());
        buttonGroup1.add(jRB_Bolean);
        buttonGroup1.add(jRB_Bag_Of_Word);
        jTextArea1.setText("");
        jTF_search.setText("");
        jL_Did_You_Mean.setText("");
        if (jRB_Bolean.isSelected()) {
            jL3_status.setText("Bolean Mode");
        }
        if (jRB_Bolean.isSelected()) {
            jL3_status.setText("Bag Of Word");
        }



    }

    private void search_TXT_File(FileInputStream fstream, String Result) {
        try {
            // Open the file c:\test.txt as a buffered reader
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader bf = new BufferedReader(new InputStreamReader(in));

            // Start a line count and declare a string to hold our current line.
            int linecount = 0;
            String line;

            // Let the user know what we are searching for
            jL3_status.setText("Searching for " + Result + " in file...");

            // Loop through each line, stashing the line into our line variable.
            while ((line = bf.readLine()) != null) {
                // Increment the count and find the index of the word
                linecount++;
                int indexfound = line.indexOf(Result);

                // If greater than -1, means we found the word
                if (indexfound > -1) {
                    System.out.println("Word was found at position " + indexfound + " on line " + linecount);
                }
            }

            // Close the file after done searching
            bf.close();
        } catch (IOException e) {
            System.out.println("IO Error Occurred: " + e.toString());
        }
    }

    
}
